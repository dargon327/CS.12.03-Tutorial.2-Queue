public class SinglyLinkedList<T> { public class Node<T> {     private T data;private Node next;public Node(T data) {this.data = data;this.next = null;}     public void setData(T data) {this.data = data;}public void setNext(Node next) {this.next = next;}public Node getNext() {return next;}public T getData() {return data;}}private int size;private Node head;private Node tail;public SinglyLinkedList(T value) {head = new Node(value);tail = head;size = 1;}public int size() {return size;}public boolean isEmpty() {if (size == 0) {return true;}return false;}public T peekFirst() throws RuntimeException {if (size == 0) {throw new RuntimeException();}return (T) head.getData();}public T peekLast() throws RuntimeException {if (size == 0) {throw new RuntimeException();}return (T)tail.getData();}public void addFirst(T value) {Node temp = new Node(value);if (size ==0) {tail = temp; head = temp;size++; return;}temp.setNext(head);head = temp;size++;}public void addLast(T value) {Node temp = new Node(value);if (size == 0) {tail = temp; head = temp;size++; return;}tail.setNext(temp);tail = temp;size++;}public void insert(T value, int index) throws IllegalArgumentException {if (index ==0) { addFirst(value); return;} else if (index == size) {addLast(value); return;}Node temp = head;Node insert = new Node(value);if (size == 0) {head = insert; tail = insert; return;} else if (index > size || index < 0) {throw new IllegalArgumentException();} else if (index == size) {tail.setNext(insert); tail = insert; return;}for (int i = 1; i < index;i++) {temp = temp.getNext();}insert.setNext(temp.getNext());temp.setNext(insert);size++;}public T removeFirst() throws RuntimeException {if (size == 0) {throw new RuntimeException();}T ret = (T)head.getData();if (size == 1) {tail = null; head = null; size--; return ret;}head = head.getNext();size--;return ret;}public T removeLast() throws RuntimeException {if (size == 0) {throw new RuntimeException();}Node temp = head;T ret = (T)tail.getData();if (size == 1){tail = null; head = null; size--; return ret;}while (true) {if (temp.getNext() == tail) {break;}temp = temp.getNext();}if (size == 1) {tail = null; head = null; size--; return ret;}temp.setNext(null);tail = temp;size--;return ret; }public T removeAt(int index) throws RuntimeException {     if (size == 0) {throw new RuntimeException();} else if (index >= size) throw new IllegalArgumentException(); else if (index <0) throw new IllegalArgumentException();     if (index == 0) {return removeFirst();} else if (index+1 == size) {return removeLast();}     Node temp = head;     T temp2 = (T)temp.getData();     if (size == 1){tail = null; head = null; size--; return temp2;}     for (int i = 2; i < index; i++) {     temp = temp.getNext(); }     T ret = (T) temp.getNext().getData();     temp.setNext(temp.getNext().getNext());     size--;     return ret; }public boolean contains(T value) {     Node temp = head;     while (true) {     if ((T)temp.getData() == value) {return true;}     if (temp == tail) {     break; }     temp = temp.getNext(); }     return false; }public T valueAt(int index) throws IllegalArgumentException {     if (size == 0) {throw new RuntimeException();} else if (index >= size) throw new IllegalArgumentException(); else if (index <0) throw new IllegalArgumentException();     Node temp = head;     for (int i = 0; i < index; i++) {     temp = temp.getNext(); }     return (T)temp.getData(); }public void reverse() {     SinglyLinkedList reversed = new SinglyLinkedList(head.data);     Node temp = head;     while (temp.next != null){     temp = temp.next;     reversed.addFirst(temp.data); }     head = reversed.head;     tail = reversed.tail; }public String toString() {     if (head == null) return "null";     Node temp = head;     String str = "" + head.data + " -> ";     while (temp.next != null){temp = temp.next;     str += ""+ temp.data + " -> "; }     str += "null";     return str; }}